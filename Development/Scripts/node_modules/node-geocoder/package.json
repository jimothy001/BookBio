{
  "name": "node-geocoder",
  "version": "2.20.1",
  "description": "Node Geocoder, node geocoding library, supports google maps, mapquest, open street map, tom tom, promise",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha --check-leaks",
    "lint": "./node_modules/.bin/jshint lib test"
  },
  "bin": {
    "geocoder": "bin/geocoder",
    "geocoder-reverse": "bin/geocoder-reverse"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nchaulet/node-geocoder.git"
  },
  "keywords": [
    "geocoder",
    "geocoding",
    "geo",
    "google",
    "maps",
    "mapquest",
    "agol",
    "arcgis",
    "tomtom"
  ],
  "author": {
    "name": "nchaulet"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nchaulet/node-geocoder/issues"
  },
  "dependencies": {
    "commander": "^2.6.0",
    "q": "^1.1.2"
  },
  "devDependencies": {
    "chai": "^1.8.1",
    "jshint": "^2.5.11",
    "mocha": "^1.14.0",
    "sinon": "^1.7.3"
  },
  "readme": "# node-geocoder\n\n[![Build Status](https://travis-ci.org/nchaulet/node-geocoder.png?branch=master)](https://travis-ci.org/nchaulet/node-geocoder)\n\n![Dependencycy status](https://david-dm.org/nchaulet/node-geocoder.png)\n\nNode library for geocoding and reverse geocoding. Can be used as a nodejs library or on command line\n\n## Installation and usage (geocoder command line)\n\n```shell\nnpm install -g node-geocoder\ngeocoder --provider google 'Fornino, 187 Bedford Ave, Brooklyn, NY 11211'\ngeocoder-reverse 48.858887 2.294486\n```\n\n## Installation (nodejs library)\n\n    npm install node-geocoder\n\n## Usage example\n\n```javascript\nvar geocoderProvider = 'google';\nvar httpAdapter = 'http';\n// optionnal\nvar extra = {\n    apiKey: 'YOUR_API_KEY', // for Mapquest, OpenCage, Google Premier\n    formatter: null         // 'gpx', 'string', ...\n};\n\nvar geocoder = require('node-geocoder')(geocoderProvider, httpAdapter, extra);\n\n// Using callback\ngeocoder.geocode('29 champs elysée paris', function(err, res) {\n    console.log(res);\n});\n\n// Or using Promise\ngeocoder.geocode('29 champs elysée paris')\n    .then(function(res) {\n        console.log(res);\n    })\n    .catch(function(err) {\n        console.log(err);\n    });\n\n// output :\n[{\n    latitude: 48.8698679,\n    longitude: 2.3072976,\n    country: 'France',\n    countryCode: 'FR',\n    city: 'Paris',\n    zipcode: '75008',\n    streetName: 'Champs-Élysées',\n    streetNumber: '29',\n    state: 'Île de France',\n    stateCode: 'IDF'\n}]\n\n## Advanced usage (only google provider)\ngeocoder.geocode({address: '29 champs elysée', country: 'France', zipcode: '75008'}, function(err, res) {\n    console.log(res);\n});\n\n// Reverse example\n\n// Using callback\ngeocoder.reverse({lat:45.767, lon:4.833}, function(err, res) {\n    console.log(res);\n});\n\n// Or using Promise\ngeocoder.reverse({lat:45.767, lon:4.833})\n    .then(function(res) {\n        console.log(res);\n    })\n    .catch(function(err) {\n        console.log(err);\n    });\n\n// Batch geocode\n\ngeocoder.batchGeocode(['13 rue sainte catherine', 'another adress'], function (results) {\n    // Return an array of type {error: false, value: []}\n    console.log(results) ;\n});\n\n```\n\n\n## Geocoder Provider\n\n* `google` : GoogleGeocoder. Supports address geocoding and reverse geocoding. Use `extra.clientId`and `extra.apiKey`(privateKey) for business licence. You can also use `extra.language` and `extra.region` to specify language and region, respectively. Note that 'https' is required when using an apiKey\n* `freegeoip` : FreegeoipGeocoder. Supports IP geocoding\n* `datasciencetoolkit` : DataScienceToolkitGeocoder. Supports IPv4 geocoding and address geocoding. Use `extra.host` to specify a local instance\n* `openstreetmap` : OpenStreetMapGeocoder. Supports address geocoding and reverse geocoding. You can use `extra.language` and `extra.email` to specify a language and a contact email address.\n  * For `geocode`, you can use an object as value, specifying one or several parameters from https://wiki.openstreetmap.org/wiki/Nominatim#Parameters\n  * For `reverse`, you can use additional parameters from https://wiki.openstreetmap.org/wiki/Nominatim#Parameters_2\n* `mapquest` : MapQuestGeocoder. Supports address geocoding and reverse geocoding. Needs an apiKey\n* `openmapquest` : Open MapQuestGeocoder (based on OpenStreetMapGeocoder). Supports address geocoding and reverse geocoding. Needs an apiKey\n* `agol` : ArcGis Online Geocoding service. Supports geocoding and reverse. Requires a client_id & client_secret and 'https' http adapter\n* `tomtom`: TomTomGeocoder. Supports address geocoding. You need to specify `extra.apiKey`\n* `nominatimmapquest`: Same geocoder as `openstreetmap`, but queries the MapQuest servers.\n* `opencage`: OpenCage Geocoder. Uses multiple open sources. Supports address and reverse geocoding. You need to specify `extra.apiKey`\n* `smartyStreet`: Smarty street geocoder (US only), you need to specify `extra.auth_id` and `extra.auth_token`\n\n## Http adapter\n\n* `http`: This adapter uses the Http nodejs library (default)\n* `https`: This adapter uses the Https nodejs library\n\n## Formatter\n\n* `gpx`    : format result using GPX format\n* `string` : format result to an String array (you need to specify `extra.formatterPattern` key)\n    * `%P` country\n    * `%p` country code\n    * `%n` street number\n    * `%S` street name\n    * `%z` zip code\n    * `%T` State\n    * `%t` state code\n\n## More\n\nYou can improve this project by adding new geocoders or http adapters.\n\nTo run tests just `npm test`.\n\nTo check code style install `jshint` and just run `jshint lib test`.\n\n### Extending node geocoder\n\nYou can add new geocoders by implementing the two methods `geocode` and `reverse`:\n\n```javascript\nvar geocoder = {\n    geocode: function(value, callback) { ... },\n    reverse: function(query, callback) { var lat = query.lat; var lon = query.lon; ... }\n}\n```\n\nYou can also add formatter implementing the following interface\n\n```javascript\nvar formatter = {\n    format: function(data) { return formattedData; },\n}\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/nchaulet/node-geocoder",
  "_id": "node-geocoder@2.20.1",
  "dist": {
    "shasum": "1a9c869631aacac05eaecd288427a3ec984c3b88"
  },
  "_from": "node-geocoder@*",
  "_resolved": "https://registry.npmjs.org/node-geocoder/-/node-geocoder-2.20.1.tgz"
}
